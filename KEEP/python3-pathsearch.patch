--- Python-3.7.3.org/Modules/getpath.c
+++ Python-3.7.3/Modules/getpath.c
@@ -155,8 +155,13 @@
 reduce(wchar_t *dir)
 {
     size_t i = wcslen(dir);
+    if (i == 1 && dir[0] == SEP) {
+        dir[0] = 0;
+        return;
+    }
     while (i > 0 && dir[i] != SEP)
         --i;
+    if (i == 0 && dir[0] == SEP) i = 1;
     dir[i] = '\0';
 }
 
@@ -354,6 +359,11 @@
         return 1;
     }
 
+    if (!access(PREFIX "/bin/python3", X_OK)) {
+        swprintf(prefix, sizeof prefix, L"%s", calculate->prefix);
+        return 1;
+    }
+
     /* Check to see if argv[0] is in the build directory */
     wcsncpy(prefix, calculate->argv0_path, MAXPATHLEN);
     prefix[MAXPATHLEN] = L'\0';
@@ -374,7 +384,13 @@
         }
     }
 
-    /* Search from argv0_path, until root is found */
+    /* Search from argv0_path, until root is found
+     * judging from the path of the currently running
+     * program about where the prefix is completely
+     * bogus unless we're running the python interpreter
+     * itself.
+     */
+    if (!wcsstr(calculate->argv0_path, L"python")) goto skip_argv0_madness;
     copy_absolute(prefix, calculate->argv0_path, MAXPATHLEN+1);
     do {
         n = wcslen(prefix);
@@ -386,9 +402,15 @@
         prefix[n] = L'\0';
         reduce(prefix);
     } while (prefix[0]);
+    skip_argv0_madness:
 
     /* Look at configure's PREFIX */
-    wcsncpy(prefix, calculate->prefix, MAXPATHLEN);
+    if (wcslen(calculate->prefix))
+        wcsncpy(prefix, calculate->prefix, MAXPATHLEN);
+    else {
+        prefix[0] = '/';
+        prefix[1] = 0;
+    }
     prefix[MAXPATHLEN] = L'\0';
     joinpath(prefix, calculate->lib_python);
     joinpath(prefix, LANDMARK);
@@ -495,7 +517,13 @@
         }
     }
 
+    if (!access(EXEC_PREFIX "/bin/python3", X_OK)) {
+        swprintf(exec_prefix, sizeof exec_prefix, L"%s", calculate->exec_prefix);
+        return 1;
+    }
+
     /* Search from argv0_path, until root is found */
+    if (!wcsstr(calculate->argv0_path, L"python")) goto skip_argv0_madness;
     copy_absolute(exec_prefix, calculate->argv0_path, MAXPATHLEN+1);
     do {
         n = wcslen(exec_prefix);
@@ -507,9 +535,16 @@
         exec_prefix[n] = L'\0';
         reduce(exec_prefix);
     } while (exec_prefix[0]);
+    skip_argv0_madness:
 
     /* Look at configure's EXEC_PREFIX */
-    wcsncpy(exec_prefix, calculate->exec_prefix, MAXPATHLEN);
+    if (strlen(EXEC_PREFIX)) {
+        wcsncpy(exec_prefix, calculate->exec_prefix, MAXPATHLEN);
+    }
+    else {
+        exec_prefix[0] = L'/';
+        exec_prefix[1] = L'\0';
+    }
     exec_prefix[MAXPATHLEN] = L'\0';
     joinpath(exec_prefix, calculate->lib_python);
     joinpath(exec_prefix, L"lib-dynload");
@@ -828,8 +863,18 @@
         defpath = delim + 1;
     }
 
-    bufsz += wcslen(calculate->zip_path) + 1;
-    bufsz += wcslen(exec_prefix) + 1;
+//  bufsz += wcslen(calculate->zip_path) + 1;
+    bufsz += wcslen(calculate->prefix) + 1;
+    bufsz += wcslen(calculate->lib_python) + 1;
+    bufsz += wcslen(calculate->exec_prefix) + 1;
+    bufsz += wcslen(calculate->lib_python) + 1;
+    bufsz += wcslen(L"lib-dynload") + 1;
+    bufsz += wcslen(calculate->prefix) + 1;
+    bufsz += wcslen(calculate->lib_python) + 1;
+    bufsz += wcslen(L"site-packages") + 1;
+    if (wcslen(exec_prefix)) {
+        bufsz += wcslen(exec_prefix) + 1;
+    }
 
     /* Allocate the buffer */
     wchar_t *buf = PyMem_RawMalloc(bufsz * sizeof(wchar_t));
@@ -845,8 +890,8 @@
     }
 
     /* Next is the default zip path */
-    wcscat(buf, calculate->zip_path);
-    wcscat(buf, delimiter);
+//  wcscat(buf, calculate->zip_path);
+//  wcscat(buf, delimiter);
 
     /* Next goes merge of compile-time $PYTHONPATH with
      * dynamically located prefix.
@@ -879,8 +924,34 @@
     }
     wcscat(buf, delimiter);
 
+    /* Next is the default prefix path. if we don't add this,
+       python will stupidly search for modules only in it's *DESTDIR* instead of prefix
+       this is fundamentally incompatible with the way sabotage relocates
+       packages */
+
+    wcscat(buf, calculate->prefix);
+    wcscat(buf, separator);
+    wcscat(buf, calculate->lib_python);
+    wcscat(buf, delimiter);
+
+    wcscat(buf, calculate->exec_prefix);
+    wcscat(buf, separator);
+    wcscat(buf, calculate->lib_python);
+    wcscat(buf, separator);
+    wcscat(buf, L"lib-dynload");
+    wcscat(buf, delimiter);
+
+    wcscat(buf, calculate->prefix);
+    wcscat(buf, separator);
+    wcscat(buf, calculate->lib_python);
+    wcscat(buf, separator);
+    wcscat(buf, L"site-packages");
+
     /* Finally, on goes the directory for dynamic-load modules */
-    wcscat(buf, exec_prefix);
+    if (wcslen(exec_prefix)) {
+        wcscat(buf, delimiter);
+        wcscat(buf, exec_prefix);
+    }
 
     config->module_search_path = buf;
     return _Py_INIT_OK();
